/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Import } from './routes/_'
import { Route as TemplatesSplatImport } from './routes/templates/$'
import { Route as SplatImport } from './routes/_.$'

// Create/Update Routes

const Route = Import.update({
  id: '/_',
  getParentRoute: () => rootRoute,
} as any)

const TemplatesSplatRoute = TemplatesSplatImport.update({
  id: '/templates/$',
  path: '/templates/$',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => Route,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_': {
      id: '/_'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Import
      parentRoute: typeof rootRoute
    }
    '/_/$': {
      id: '/_/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/templates/$': {
      id: '/templates/$'
      path: '/templates/$'
      fullPath: '/templates/$'
      preLoaderRoute: typeof TemplatesSplatImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface RouteChildren {
  SplatRoute: typeof SplatRoute
}

const RouteChildren: RouteChildren = {
  SplatRoute: SplatRoute,
}

const RouteWithChildren = Route._addFileChildren(RouteChildren)

export interface FileRoutesByFullPath {
  '': typeof RouteWithChildren
  '/$': typeof SplatRoute
  '/templates/$': typeof TemplatesSplatRoute
}

export interface FileRoutesByTo {
  '': typeof RouteWithChildren
  '/$': typeof SplatRoute
  '/templates/$': typeof TemplatesSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_': typeof RouteWithChildren
  '/_/$': typeof SplatRoute
  '/templates/$': typeof TemplatesSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$' | '/templates/$'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/$' | '/templates/$'
  id: '__root__' | '/_' | '/_/$' | '/templates/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  Route: typeof RouteWithChildren
  TemplatesSplatRoute: typeof TemplatesSplatRoute
}

const rootRouteChildren: RootRouteChildren = {
  Route: RouteWithChildren,
  TemplatesSplatRoute: TemplatesSplatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_",
        "/templates/$"
      ]
    },
    "/_": {
      "filePath": "_.tsx",
      "children": [
        "/_/$"
      ]
    },
    "/_/$": {
      "filePath": "_.$.tsx",
      "parent": "/_"
    },
    "/templates/$": {
      "filePath": "templates/$.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
